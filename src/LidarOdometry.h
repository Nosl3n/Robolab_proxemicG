//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `LidarOdometry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __LidarOdometry_h__
#define __LidarOdometry_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <FullPoseEstimation.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompLidarOdometry
{

class LidarOdometry;
class LidarOdometryPrx;

}

namespace RoboCompLidarOdometry
{

struct PoseAndChange
{
    ::RoboCompFullPoseEstimation::FullPoseMatrix pose;
    ::RoboCompFullPoseEstimation::FullPoseMatrix change;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompFullPoseEstimation::FullPoseMatrix&, const ::RoboCompFullPoseEstimation::FullPoseMatrix&> ice_tuple() const
    {
        return std::tie(pose, change);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompLidarOdometry
{

class LidarOdometry : public virtual ::Ice::Object
{
public:

    using ProxyType = LidarOdometryPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::RoboCompFullPoseEstimation::FullPoseEuler getFullPoseEuler(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getFullPoseEuler(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::RoboCompFullPoseEstimation::FullPoseMatrix getFullPoseMatrix(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getFullPoseMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual PoseAndChange getPoseAndChange(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPoseAndChange(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void reset(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_reset(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompLidarOdometry
{

class LidarOdometryPrx : public virtual ::Ice::Proxy<LidarOdometryPrx, ::Ice::ObjectPrx>
{
public:

    ::RoboCompFullPoseEstimation::FullPoseEuler getFullPoseEuler(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompFullPoseEstimation::FullPoseEuler>(true, this, &LidarOdometryPrx::_iceI_getFullPoseEuler, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getFullPoseEulerAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompFullPoseEstimation::FullPoseEuler>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompFullPoseEstimation::FullPoseEuler, P>(false, this, &LidarOdometryPrx::_iceI_getFullPoseEuler, context);
    }

    ::std::function<void()>
    getFullPoseEulerAsync(::std::function<void(::RoboCompFullPoseEstimation::FullPoseEuler)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompFullPoseEstimation::FullPoseEuler>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLidarOdometry::LidarOdometryPrx::_iceI_getFullPoseEuler, context);
    }

    /// \cond INTERNAL
    void _iceI_getFullPoseEuler(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompFullPoseEstimation::FullPoseEuler>>&, const ::Ice::Context&);
    /// \endcond

    ::RoboCompFullPoseEstimation::FullPoseMatrix getFullPoseMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompFullPoseEstimation::FullPoseMatrix>(true, this, &LidarOdometryPrx::_iceI_getFullPoseMatrix, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getFullPoseMatrixAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompFullPoseEstimation::FullPoseMatrix>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompFullPoseEstimation::FullPoseMatrix, P>(false, this, &LidarOdometryPrx::_iceI_getFullPoseMatrix, context);
    }

    ::std::function<void()>
    getFullPoseMatrixAsync(::std::function<void(::RoboCompFullPoseEstimation::FullPoseMatrix)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompFullPoseEstimation::FullPoseMatrix>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLidarOdometry::LidarOdometryPrx::_iceI_getFullPoseMatrix, context);
    }

    /// \cond INTERNAL
    void _iceI_getFullPoseMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompFullPoseEstimation::FullPoseMatrix>>&, const ::Ice::Context&);
    /// \endcond

    PoseAndChange getPoseAndChange(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompLidarOdometry::PoseAndChange>(true, this, &LidarOdometryPrx::_iceI_getPoseAndChange, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPoseAndChangeAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompLidarOdometry::PoseAndChange>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompLidarOdometry::PoseAndChange, P>(false, this, &LidarOdometryPrx::_iceI_getPoseAndChange, context);
    }

    ::std::function<void()>
    getPoseAndChangeAsync(::std::function<void(::RoboCompLidarOdometry::PoseAndChange)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompLidarOdometry::PoseAndChange>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLidarOdometry::LidarOdometryPrx::_iceI_getPoseAndChange, context);
    }

    /// \cond INTERNAL
    void _iceI_getPoseAndChange(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompLidarOdometry::PoseAndChange>>&, const ::Ice::Context&);
    /// \endcond

    void reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &LidarOdometryPrx::_iceI_reset, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resetAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &LidarOdometryPrx::_iceI_reset, context);
    }

    ::std::function<void()>
    resetAsync(::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLidarOdometry::LidarOdometryPrx::_iceI_reset, context);
    }

    /// \cond INTERNAL
    void _iceI_reset(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    LidarOdometryPrx() = default;
    friend ::std::shared_ptr<LidarOdometryPrx> IceInternal::createProxy<LidarOdometryPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompLidarOdometry::PoseAndChange>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 130;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompLidarOdometry::PoseAndChange, S>
{
    static void read(S* istr, ::RoboCompLidarOdometry::PoseAndChange& v)
    {
        istr->readAll(v.pose, v.change);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompLidarOdometry
{

using LidarOdometryPtr = ::std::shared_ptr<LidarOdometry>;
using LidarOdometryPrxPtr = ::std::shared_ptr<LidarOdometryPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompLidarOdometry
{

class LidarOdometry;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< LidarOdometry>&);
::IceProxy::Ice::Object* upCast(LidarOdometry*);
/// \endcond

}

}

namespace RoboCompLidarOdometry
{

class LidarOdometry;
/// \cond INTERNAL
::Ice::Object* upCast(LidarOdometry*);
/// \endcond
typedef ::IceInternal::Handle< LidarOdometry> LidarOdometryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompLidarOdometry::LidarOdometry> LidarOdometryPrx;
typedef LidarOdometryPrx LidarOdometryPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(LidarOdometryPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompLidarOdometry
{

struct PoseAndChange
{
    ::RoboCompFullPoseEstimation::FullPoseMatrix pose;
    ::RoboCompFullPoseEstimation::FullPoseMatrix change;
};

}

namespace RoboCompLidarOdometry
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseEuler.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_getFullPoseEuler.
 */
class Callback_LidarOdometry_getFullPoseEuler_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LidarOdometry_getFullPoseEuler_Base> Callback_LidarOdometry_getFullPoseEulerPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseMatrix.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_getFullPoseMatrix.
 */
class Callback_LidarOdometry_getFullPoseMatrix_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LidarOdometry_getFullPoseMatrix_Base> Callback_LidarOdometry_getFullPoseMatrixPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getPoseAndChange.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_getPoseAndChange.
 */
class Callback_LidarOdometry_getPoseAndChange_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LidarOdometry_getPoseAndChange_Base> Callback_LidarOdometry_getPoseAndChangePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_reset.
 */
class Callback_LidarOdometry_reset_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LidarOdometry_reset_Base> Callback_LidarOdometry_resetPtr;

}

namespace IceProxy
{

namespace RoboCompLidarOdometry
{

class LidarOdometry : public virtual ::Ice::Proxy<LidarOdometry, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompFullPoseEstimation::FullPoseEuler getFullPoseEuler(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getFullPoseEuler(_iceI_begin_getFullPoseEuler(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getFullPoseEuler(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseEuler(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseEuler(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(const ::RoboCompLidarOdometry::Callback_LidarOdometry_getFullPoseEulerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseEuler(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(const ::Ice::Context& context, const ::RoboCompLidarOdometry::Callback_LidarOdometry_getFullPoseEulerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseEuler(context, cb, cookie);
    }

    ::RoboCompFullPoseEstimation::FullPoseEuler end_getFullPoseEuler(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getFullPoseEuler(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompFullPoseEstimation::FullPoseMatrix getFullPoseMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getFullPoseMatrix(_iceI_begin_getFullPoseMatrix(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getFullPoseMatrix(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseMatrix(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(const ::RoboCompLidarOdometry::Callback_LidarOdometry_getFullPoseMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(const ::Ice::Context& context, const ::RoboCompLidarOdometry::Callback_LidarOdometry_getFullPoseMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseMatrix(context, cb, cookie);
    }

    ::RoboCompFullPoseEstimation::FullPoseMatrix end_getFullPoseMatrix(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getFullPoseMatrix(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompLidarOdometry::PoseAndChange getPoseAndChange(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPoseAndChange(_iceI_begin_getPoseAndChange(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPoseAndChange(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPoseAndChange(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoseAndChange(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoseAndChange(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoseAndChange(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoseAndChange(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoseAndChange(const ::RoboCompLidarOdometry::Callback_LidarOdometry_getPoseAndChangePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoseAndChange(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoseAndChange(const ::Ice::Context& context, const ::RoboCompLidarOdometry::Callback_LidarOdometry_getPoseAndChangePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoseAndChange(context, cb, cookie);
    }

    ::RoboCompLidarOdometry::PoseAndChange end_getPoseAndChange(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPoseAndChange(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_reset(_iceI_begin_reset(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_reset(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::RoboCompLidarOdometry::Callback_LidarOdometry_resetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context, const ::RoboCompLidarOdometry::Callback_LidarOdometry_resetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(context, cb, cookie);
    }

    void end_reset(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_reset(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompLidarOdometry
{

class LidarOdometry : public virtual ::Ice::Object
{
public:

    typedef LidarOdometryPrx ProxyType;
    typedef LidarOdometryPtr PointerType;

    virtual ~LidarOdometry();

#ifdef ICE_CPP11_COMPILER
    LidarOdometry() = default;
    LidarOdometry(const LidarOdometry&) = default;
    LidarOdometry& operator=(const LidarOdometry&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::RoboCompFullPoseEstimation::FullPoseEuler getFullPoseEuler(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getFullPoseEuler(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::RoboCompFullPoseEstimation::FullPoseMatrix getFullPoseMatrix(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getFullPoseMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual PoseAndChange getPoseAndChange(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPoseAndChange(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void reset(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_reset(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const LidarOdometry& lhs, const LidarOdometry& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const LidarOdometry& lhs, const LidarOdometry& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompLidarOdometry::PoseAndChange>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 130;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompLidarOdometry::PoseAndChange, S>
{
    static void write(S* ostr, const ::RoboCompLidarOdometry::PoseAndChange& v)
    {
        ostr->write(v.pose);
        ostr->write(v.change);
    }
};

template<typename S>
struct StreamReader< ::RoboCompLidarOdometry::PoseAndChange, S>
{
    static void read(S* istr, ::RoboCompLidarOdometry::PoseAndChange& v)
    {
        istr->read(v.pose);
        istr->read(v.change);
    }
};

}
/// \endcond

namespace RoboCompLidarOdometry
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseEuler.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_getFullPoseEuler.
 */
template<class T>
class CallbackNC_LidarOdometry_getFullPoseEuler : public Callback_LidarOdometry_getFullPoseEuler_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompFullPoseEstimation::FullPoseEuler&);

    CallbackNC_LidarOdometry_getFullPoseEuler(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LidarOdometryPrx proxy = LidarOdometryPrx::uncheckedCast(result->getProxy());
        ::RoboCompFullPoseEstimation::FullPoseEuler ret;
        try
        {
            ret = proxy->end_getFullPoseEuler(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseEuler.
 */
template<class T> Callback_LidarOdometry_getFullPoseEulerPtr
newCallback_LidarOdometry_getFullPoseEuler(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompFullPoseEstimation::FullPoseEuler&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_getFullPoseEuler<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseEuler.
 */
template<class T> Callback_LidarOdometry_getFullPoseEulerPtr
newCallback_LidarOdometry_getFullPoseEuler(T* instance, void (T::*cb)(const ::RoboCompFullPoseEstimation::FullPoseEuler&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_getFullPoseEuler<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseEuler.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_getFullPoseEuler.
 */
template<class T, typename CT>
class Callback_LidarOdometry_getFullPoseEuler : public Callback_LidarOdometry_getFullPoseEuler_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompFullPoseEstimation::FullPoseEuler&, const CT&);

    Callback_LidarOdometry_getFullPoseEuler(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LidarOdometryPrx proxy = LidarOdometryPrx::uncheckedCast(result->getProxy());
        ::RoboCompFullPoseEstimation::FullPoseEuler ret;
        try
        {
            ret = proxy->end_getFullPoseEuler(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseEuler.
 */
template<class T, typename CT> Callback_LidarOdometry_getFullPoseEulerPtr
newCallback_LidarOdometry_getFullPoseEuler(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompFullPoseEstimation::FullPoseEuler&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_getFullPoseEuler<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseEuler.
 */
template<class T, typename CT> Callback_LidarOdometry_getFullPoseEulerPtr
newCallback_LidarOdometry_getFullPoseEuler(T* instance, void (T::*cb)(const ::RoboCompFullPoseEstimation::FullPoseEuler&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_getFullPoseEuler<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseMatrix.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_getFullPoseMatrix.
 */
template<class T>
class CallbackNC_LidarOdometry_getFullPoseMatrix : public Callback_LidarOdometry_getFullPoseMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompFullPoseEstimation::FullPoseMatrix&);

    CallbackNC_LidarOdometry_getFullPoseMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LidarOdometryPrx proxy = LidarOdometryPrx::uncheckedCast(result->getProxy());
        ::RoboCompFullPoseEstimation::FullPoseMatrix ret;
        try
        {
            ret = proxy->end_getFullPoseMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseMatrix.
 */
template<class T> Callback_LidarOdometry_getFullPoseMatrixPtr
newCallback_LidarOdometry_getFullPoseMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompFullPoseEstimation::FullPoseMatrix&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_getFullPoseMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseMatrix.
 */
template<class T> Callback_LidarOdometry_getFullPoseMatrixPtr
newCallback_LidarOdometry_getFullPoseMatrix(T* instance, void (T::*cb)(const ::RoboCompFullPoseEstimation::FullPoseMatrix&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_getFullPoseMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseMatrix.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_getFullPoseMatrix.
 */
template<class T, typename CT>
class Callback_LidarOdometry_getFullPoseMatrix : public Callback_LidarOdometry_getFullPoseMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompFullPoseEstimation::FullPoseMatrix&, const CT&);

    Callback_LidarOdometry_getFullPoseMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LidarOdometryPrx proxy = LidarOdometryPrx::uncheckedCast(result->getProxy());
        ::RoboCompFullPoseEstimation::FullPoseMatrix ret;
        try
        {
            ret = proxy->end_getFullPoseMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseMatrix.
 */
template<class T, typename CT> Callback_LidarOdometry_getFullPoseMatrixPtr
newCallback_LidarOdometry_getFullPoseMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompFullPoseEstimation::FullPoseMatrix&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_getFullPoseMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getFullPoseMatrix.
 */
template<class T, typename CT> Callback_LidarOdometry_getFullPoseMatrixPtr
newCallback_LidarOdometry_getFullPoseMatrix(T* instance, void (T::*cb)(const ::RoboCompFullPoseEstimation::FullPoseMatrix&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_getFullPoseMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getPoseAndChange.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_getPoseAndChange.
 */
template<class T>
class CallbackNC_LidarOdometry_getPoseAndChange : public Callback_LidarOdometry_getPoseAndChange_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const PoseAndChange&);

    CallbackNC_LidarOdometry_getPoseAndChange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LidarOdometryPrx proxy = LidarOdometryPrx::uncheckedCast(result->getProxy());
        PoseAndChange ret;
        try
        {
            ret = proxy->end_getPoseAndChange(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getPoseAndChange.
 */
template<class T> Callback_LidarOdometry_getPoseAndChangePtr
newCallback_LidarOdometry_getPoseAndChange(const IceUtil::Handle<T>& instance, void (T::*cb)(const PoseAndChange&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_getPoseAndChange<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getPoseAndChange.
 */
template<class T> Callback_LidarOdometry_getPoseAndChangePtr
newCallback_LidarOdometry_getPoseAndChange(T* instance, void (T::*cb)(const PoseAndChange&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_getPoseAndChange<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getPoseAndChange.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_getPoseAndChange.
 */
template<class T, typename CT>
class Callback_LidarOdometry_getPoseAndChange : public Callback_LidarOdometry_getPoseAndChange_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const PoseAndChange&, const CT&);

    Callback_LidarOdometry_getPoseAndChange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LidarOdometryPrx proxy = LidarOdometryPrx::uncheckedCast(result->getProxy());
        PoseAndChange ret;
        try
        {
            ret = proxy->end_getPoseAndChange(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getPoseAndChange.
 */
template<class T, typename CT> Callback_LidarOdometry_getPoseAndChangePtr
newCallback_LidarOdometry_getPoseAndChange(const IceUtil::Handle<T>& instance, void (T::*cb)(const PoseAndChange&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_getPoseAndChange<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_getPoseAndChange.
 */
template<class T, typename CT> Callback_LidarOdometry_getPoseAndChangePtr
newCallback_LidarOdometry_getPoseAndChange(T* instance, void (T::*cb)(const PoseAndChange&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_getPoseAndChange<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_reset.
 */
template<class T>
class CallbackNC_LidarOdometry_reset : public Callback_LidarOdometry_reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LidarOdometry_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 */
template<class T> Callback_LidarOdometry_resetPtr
newCallback_LidarOdometry_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_reset<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 */
template<class T> Callback_LidarOdometry_resetPtr
newCallback_LidarOdometry_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_reset<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 */
template<class T> Callback_LidarOdometry_resetPtr
newCallback_LidarOdometry_reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_reset<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 */
template<class T> Callback_LidarOdometry_resetPtr
newCallback_LidarOdometry_reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LidarOdometry_reset<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 * Create a wrapper instance by calling ::RoboCompLidarOdometry::newCallback_LidarOdometry_reset.
 */
template<class T, typename CT>
class Callback_LidarOdometry_reset : public Callback_LidarOdometry_reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LidarOdometry_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 */
template<class T, typename CT> Callback_LidarOdometry_resetPtr
newCallback_LidarOdometry_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_reset<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 */
template<class T, typename CT> Callback_LidarOdometry_resetPtr
newCallback_LidarOdometry_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_reset<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 */
template<class T, typename CT> Callback_LidarOdometry_resetPtr
newCallback_LidarOdometry_reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_reset<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidarOdometry::LidarOdometry::begin_reset.
 */
template<class T, typename CT> Callback_LidarOdometry_resetPtr
newCallback_LidarOdometry_reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LidarOdometry_reset<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
